import itertools 
from .sqlgen import group1_create_pivot, group2_create_pivot, GROUP1, GROUP2, group1_create_yearly_views, group2_create_yearly_views
from .util import group_geography_vs_model, clean_tablenames

def group_annual_monthly(table_names):
    """Convert a dict of table names to a dictionary grouping together annual and monthly tables. Keys are
    the table names (lowercase) without the embedded annual/monthly/daily.

    Args:
        table_names (dict): dictionary of tablenames
    """

    def group_temporal(x):
        
        # remove temporal quanitifier from table name
        x_short = x.lower().replace('annual','')
        x_short = x_short.replace('monthly','')
        x_short = x_short.replace('daily','')
        x_short = x_short.replace('__','_')
        if x_short.endswith('_'):
            x_short = x_short[:-1]

        return x_short

    annual_monthly = dict()
    temporal_grouped = itertools.groupby(table_names, group_temporal)
    for key, group in temporal_grouped:
        if key not in annual_monthly:
            annual_monthly[key] = set(group)
        else: 
            annual_monthly[key] = annual_monthly[key].union(set(group))
    return annual_monthly

def sift_temporal_group(table_group):
    """Returns a dict of tables key'd by their temporal identifier from a unordered set of tables

    Args:
        table_group (set): set of tables grouped together as annual/monthly/daily variants
    
    Returns:
        table_group_dict (dict): {'annual': annual_table, 'monthly':monthly_table, 'daily': daily_table OR None}
    """
    table_group_dict = {'annual':None, 'monthly': None, 'daily': None}
    assert(len(table_group) <= 3)
    for t in table_group:
        if 'annual' in t:
            table_group_dict['annual'] = t
        elif 'monthly' in t:
            table_group_dict['monthly'] = t
        elif 'daily' in t:
            table_group_dict['daily'] = t
    
    return table_group_dict



def create_pivot_annual_monthly_tables(table_names, output_file, year_start=1958, year_end=2019):
    """Write sql to file generating pivot tables and accompanying yearly views for a list of postgres tables generated through import_gpkg

    Args:
        table_names (list): postgres table names prefexed with schema ie schema."my-table_name"
        output_file (Path): output file to write sql to

    Returns:
        pivot_tablenames, view_names_all: lists of tables/views generated by function
    """
    
    geography, model_tables = group_geography_vs_model(table_names)
    schema, tables_names_short = clean_tablenames(model_tables)
    # group together annual/monthly table pairs
    annual_monthly = group_annual_monthly(tables_names_short)

    # lists of all pivot tables and views created
    pivot_tablenames = []
    view_names_all = []

    with open(output_file, 'w') as f:
        for key, component_tables in annual_monthly.items(): 
            pivot_tablename = key+'_pivot' 
            pivot_tablenames.append(pivot_tablename)
            
            temporal_group = sift_temporal_group(component_tables)
            annual = temporal_group['annual']
            monthly = temporal_group['monthly']

            # extract output name 
            output = key.split('_')[0]

            table_sql = ""
            view_sql = ""

            # call appropriate sql gen function for group1/group2 outputs
            if output in GROUP1['outputs']:
                table_sql = group1_create_pivot(schema, output, monthly, annual, pivot_tablename, year_start=year_start, year_end=year_end)
                view_sql,view_names = group1_create_yearly_views(schema, pivot_tablename, year_start=year_start, year_end=year_end)
                view_names_all += view_names
            else:
                table_sql = group2_create_pivot(schema, output, monthly, annual, pivot_tablename, year_start=year_start, year_end=year_end)
                view_sql,view_names = group2_create_yearly_views(schema, pivot_tablename, year_start=year_start, year_end=year_end)
                view_names_all += view_names

            f.write(table_sql)
            f.write(view_sql)

    return pivot_tablenames, view_names_all